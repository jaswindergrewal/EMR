//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Emrdev.DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class devbackupEntitiesPart1 : DbContext
    {
        public devbackupEntitiesPart1()
            : base("name=devbackupEntitiesPart1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<lab_AddressDetails> lab_AddressDetails { get; set; }
        public DbSet<CRM_CampaignType> CRM_CampaignType { get; set; }
        public DbSet<Contact_tbl> Contact_tbl { get; set; }
        public DbSet<admin_RenewalPackages> admin_RenewalPackages { get; set; }
        public DbSet<PatientPackage> PatientPackages { get; set; }
        public DbSet<EmailTemplate> EmailTemplates { get; set; }
        public DbSet<QB_Match1> QB_Match1 { get; set; }
        public DbSet<XeroPatient> XeroPatients { get; set; }
        public DbSet<XeroLog> XeroLogs { get; set; }
        public DbSet<XeroCredential> XeroCredentials { get; set; }
        public DbSet<FreshBook_Patients_Match> FreshBook_Patients_Match { get; set; }
        public DbSet<FreshBookClient> FreshBookClients { get; set; }
        public DbSet<FreshBook_Invoice_Match> FreshBook_Invoice_Match { get; set; }
        public DbSet<FreshBook_Item_Match> FreshBook_Item_Match { get; set; }
        public DbSet<CRM_Prospects> CRM_Prospects { get; set; }
        public DbSet<CRM_Attendees> CRM_Attendees { get; set; }
        public DbSet<CRM_Campaigns> CRM_Campaigns { get; set; }
        public DbSet<CRM_Events> CRM_Events { get; set; }
        public DbSet<CRM_Log> CRM_Log { get; set; }
        public DbSet<CRM_MarketingActivity> CRM_MarketingActivity { get; set; }
        public DbSet<CRM_MarketingSource_Campaigns> CRM_MarketingSource_Campaigns { get; set; }
        public DbSet<CRM_MarketingSource_Prospects> CRM_MarketingSource_Prospects { get; set; }
        public DbSet<CRM_MarketingSources> CRM_MarketingSources { get; set; }
        public DbSet<CRM_MarketsourceID> CRM_MarketsourceID { get; set; }
        public DbSet<CRM_Registrants> CRM_Registrants { get; set; }
        public DbSet<CRM_Status> CRM_Status { get; set; }
    
        public virtual int ssp_DeleteProblem_Appointment(Nullable<int> patientID, Nullable<int> diagnosisID, Nullable<int> appointmentID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_DeleteProblem_Appointment", patientIDParameter, diagnosisIDParameter, appointmentIDParameter);
        }
    
        public virtual ObjectResult<ssp_GetDiagnosisDetails_Result> ssp_GetDiagnosisDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetDiagnosisDetails_Result>("ssp_GetDiagnosisDetails");
        }
    
        public virtual ObjectResult<ssp_GetProblem_Appointment_Diagnosis_Result> ssp_GetProblem_Appointment_Diagnosis(Nullable<int> patientID, Nullable<int> appointmentID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetProblem_Appointment_Diagnosis_Result>("ssp_GetProblem_Appointment_Diagnosis", patientIDParameter, appointmentIDParameter);
        }
    
        public virtual ObjectResult<ssp_GetProblemDiagnosis_Result> ssp_GetProblemDiagnosis(Nullable<int> patientID, Nullable<int> appointmentID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetProblemDiagnosis_Result>("ssp_GetProblemDiagnosis", patientIDParameter, appointmentIDParameter);
        }
    
        public virtual int ssp_InsertLabReportGroups(string groupName, string groupTitle, Nullable<int> sortOrder, Nullable<bool> showGraph, Nullable<decimal> chartBottom, Nullable<decimal> maleLongevityHigh, string femLowTxt, string femNormalTxt, Nullable<int> panelID, Nullable<decimal> femaleAcceptableLow, string description, string maleHighTxt, string maleLowTxt, string maleNormalTxt, string femHighTxt, Nullable<decimal> maleLongevityLow, Nullable<decimal> femaleLongevityHigh, Nullable<decimal> femaleLongevityLow, Nullable<decimal> maleAcceptableHigh, Nullable<decimal> maleAcceptableLow, Nullable<decimal> femaleAcceptableHigh, ObjectParameter resultOut)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("groupName", groupName) :
                new ObjectParameter("groupName", typeof(string));
    
            var groupTitleParameter = groupTitle != null ?
                new ObjectParameter("groupTitle", groupTitle) :
                new ObjectParameter("groupTitle", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(int));
    
            var showGraphParameter = showGraph.HasValue ?
                new ObjectParameter("showGraph", showGraph) :
                new ObjectParameter("showGraph", typeof(bool));
    
            var chartBottomParameter = chartBottom.HasValue ?
                new ObjectParameter("chartBottom", chartBottom) :
                new ObjectParameter("chartBottom", typeof(decimal));
    
            var maleLongevityHighParameter = maleLongevityHigh.HasValue ?
                new ObjectParameter("maleLongevityHigh", maleLongevityHigh) :
                new ObjectParameter("maleLongevityHigh", typeof(decimal));
    
            var femLowTxtParameter = femLowTxt != null ?
                new ObjectParameter("femLowTxt", femLowTxt) :
                new ObjectParameter("femLowTxt", typeof(string));
    
            var femNormalTxtParameter = femNormalTxt != null ?
                new ObjectParameter("femNormalTxt", femNormalTxt) :
                new ObjectParameter("femNormalTxt", typeof(string));
    
            var panelIDParameter = panelID.HasValue ?
                new ObjectParameter("PanelID", panelID) :
                new ObjectParameter("PanelID", typeof(int));
    
            var femaleAcceptableLowParameter = femaleAcceptableLow.HasValue ?
                new ObjectParameter("femaleAcceptableLow", femaleAcceptableLow) :
                new ObjectParameter("femaleAcceptableLow", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var maleHighTxtParameter = maleHighTxt != null ?
                new ObjectParameter("maleHighTxt", maleHighTxt) :
                new ObjectParameter("maleHighTxt", typeof(string));
    
            var maleLowTxtParameter = maleLowTxt != null ?
                new ObjectParameter("maleLowTxt", maleLowTxt) :
                new ObjectParameter("maleLowTxt", typeof(string));
    
            var maleNormalTxtParameter = maleNormalTxt != null ?
                new ObjectParameter("maleNormalTxt", maleNormalTxt) :
                new ObjectParameter("maleNormalTxt", typeof(string));
    
            var femHighTxtParameter = femHighTxt != null ?
                new ObjectParameter("femHighTxt", femHighTxt) :
                new ObjectParameter("femHighTxt", typeof(string));
    
            var maleLongevityLowParameter = maleLongevityLow.HasValue ?
                new ObjectParameter("maleLongevityLow", maleLongevityLow) :
                new ObjectParameter("maleLongevityLow", typeof(decimal));
    
            var femaleLongevityHighParameter = femaleLongevityHigh.HasValue ?
                new ObjectParameter("femaleLongevityHigh", femaleLongevityHigh) :
                new ObjectParameter("femaleLongevityHigh", typeof(decimal));
    
            var femaleLongevityLowParameter = femaleLongevityLow.HasValue ?
                new ObjectParameter("femaleLongevityLow", femaleLongevityLow) :
                new ObjectParameter("femaleLongevityLow", typeof(decimal));
    
            var maleAcceptableHighParameter = maleAcceptableHigh.HasValue ?
                new ObjectParameter("maleAcceptableHigh", maleAcceptableHigh) :
                new ObjectParameter("maleAcceptableHigh", typeof(decimal));
    
            var maleAcceptableLowParameter = maleAcceptableLow.HasValue ?
                new ObjectParameter("maleAcceptableLow", maleAcceptableLow) :
                new ObjectParameter("maleAcceptableLow", typeof(decimal));
    
            var femaleAcceptableHighParameter = femaleAcceptableHigh.HasValue ?
                new ObjectParameter("femaleAcceptableHigh", femaleAcceptableHigh) :
                new ObjectParameter("femaleAcceptableHigh", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_InsertLabReportGroups", groupNameParameter, groupTitleParameter, sortOrderParameter, showGraphParameter, chartBottomParameter, maleLongevityHighParameter, femLowTxtParameter, femNormalTxtParameter, panelIDParameter, femaleAcceptableLowParameter, descriptionParameter, maleHighTxtParameter, maleLowTxtParameter, maleNormalTxtParameter, femHighTxtParameter, maleLongevityLowParameter, femaleLongevityHighParameter, femaleLongevityLowParameter, maleAcceptableHighParameter, maleAcceptableLowParameter, femaleAcceptableHighParameter, resultOut);
        }
    
        public virtual ObjectResult<Nullable<int>> ssp_InsertProtocolDiagnosis(Nullable<int> protocolId, Nullable<int> diagnosisId)
        {
            var protocolIdParameter = protocolId.HasValue ?
                new ObjectParameter("ProtocolId", protocolId) :
                new ObjectParameter("ProtocolId", typeof(int));
    
            var diagnosisIdParameter = diagnosisId.HasValue ?
                new ObjectParameter("DiagnosisId", diagnosisId) :
                new ObjectParameter("DiagnosisId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ssp_InsertProtocolDiagnosis", protocolIdParameter, diagnosisIdParameter);
        }
    
        public virtual int ssp_UpdateGroups(Nullable<int> iD, string groupName, string groupTitle, Nullable<int> sortOrder, Nullable<bool> showGraph, Nullable<decimal> chartBottom, string femHighTxt, string femLowTxt, string femNormalTxt, Nullable<int> panelID, Nullable<decimal> femaleAcceptableHigh, Nullable<decimal> femaleAcceptableLow, string description, string maleHighTxt, string maleLowTxt, string maleNormalTxt, Nullable<decimal> maleLongevityHigh, Nullable<decimal> maleLongevityLow, Nullable<decimal> femaleLongevityHigh, Nullable<decimal> femaleLongevityLow, Nullable<decimal> maleAcceptableHigh, Nullable<decimal> maleAcceptableLow, ObjectParameter resultOut)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var groupTitleParameter = groupTitle != null ?
                new ObjectParameter("GroupTitle", groupTitle) :
                new ObjectParameter("GroupTitle", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var showGraphParameter = showGraph.HasValue ?
                new ObjectParameter("ShowGraph", showGraph) :
                new ObjectParameter("ShowGraph", typeof(bool));
    
            var chartBottomParameter = chartBottom.HasValue ?
                new ObjectParameter("ChartBottom", chartBottom) :
                new ObjectParameter("ChartBottom", typeof(decimal));
    
            var femHighTxtParameter = femHighTxt != null ?
                new ObjectParameter("FemHighTxt", femHighTxt) :
                new ObjectParameter("FemHighTxt", typeof(string));
    
            var femLowTxtParameter = femLowTxt != null ?
                new ObjectParameter("FemLowTxt", femLowTxt) :
                new ObjectParameter("FemLowTxt", typeof(string));
    
            var femNormalTxtParameter = femNormalTxt != null ?
                new ObjectParameter("FemNormalTxt", femNormalTxt) :
                new ObjectParameter("FemNormalTxt", typeof(string));
    
            var panelIDParameter = panelID.HasValue ?
                new ObjectParameter("PanelID", panelID) :
                new ObjectParameter("PanelID", typeof(int));
    
            var femaleAcceptableHighParameter = femaleAcceptableHigh.HasValue ?
                new ObjectParameter("FemaleAcceptableHigh", femaleAcceptableHigh) :
                new ObjectParameter("FemaleAcceptableHigh", typeof(decimal));
    
            var femaleAcceptableLowParameter = femaleAcceptableLow.HasValue ?
                new ObjectParameter("FemaleAcceptableLow", femaleAcceptableLow) :
                new ObjectParameter("FemaleAcceptableLow", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var maleHighTxtParameter = maleHighTxt != null ?
                new ObjectParameter("MaleHighTxt", maleHighTxt) :
                new ObjectParameter("MaleHighTxt", typeof(string));
    
            var maleLowTxtParameter = maleLowTxt != null ?
                new ObjectParameter("MaleLowTxt", maleLowTxt) :
                new ObjectParameter("MaleLowTxt", typeof(string));
    
            var maleNormalTxtParameter = maleNormalTxt != null ?
                new ObjectParameter("MaleNormalTxt", maleNormalTxt) :
                new ObjectParameter("MaleNormalTxt", typeof(string));
    
            var maleLongevityHighParameter = maleLongevityHigh.HasValue ?
                new ObjectParameter("MaleLongevityHigh", maleLongevityHigh) :
                new ObjectParameter("MaleLongevityHigh", typeof(decimal));
    
            var maleLongevityLowParameter = maleLongevityLow.HasValue ?
                new ObjectParameter("MaleLongevityLow", maleLongevityLow) :
                new ObjectParameter("MaleLongevityLow", typeof(decimal));
    
            var femaleLongevityHighParameter = femaleLongevityHigh.HasValue ?
                new ObjectParameter("FemaleLongevityHigh", femaleLongevityHigh) :
                new ObjectParameter("FemaleLongevityHigh", typeof(decimal));
    
            var femaleLongevityLowParameter = femaleLongevityLow.HasValue ?
                new ObjectParameter("FemaleLongevityLow", femaleLongevityLow) :
                new ObjectParameter("FemaleLongevityLow", typeof(decimal));
    
            var maleAcceptableHighParameter = maleAcceptableHigh.HasValue ?
                new ObjectParameter("MaleAcceptableHigh", maleAcceptableHigh) :
                new ObjectParameter("MaleAcceptableHigh", typeof(decimal));
    
            var maleAcceptableLowParameter = maleAcceptableLow.HasValue ?
                new ObjectParameter("MaleAcceptableLow", maleAcceptableLow) :
                new ObjectParameter("MaleAcceptableLow", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_UpdateGroups", iDParameter, groupNameParameter, groupTitleParameter, sortOrderParameter, showGraphParameter, chartBottomParameter, femHighTxtParameter, femLowTxtParameter, femNormalTxtParameter, panelIDParameter, femaleAcceptableHighParameter, femaleAcceptableLowParameter, descriptionParameter, maleHighTxtParameter, maleLowTxtParameter, maleNormalTxtParameter, maleLongevityHighParameter, maleLongevityLowParameter, femaleLongevityHighParameter, femaleLongevityLowParameter, maleAcceptableHighParameter, maleAcceptableLowParameter, resultOut);
        }
    
        public virtual ObjectResult<string> ssp_ValidateAndUpdateDictation_Diagnosis(Nullable<int> diagnosisID, string diagnosisName, string iCDCode)
        {
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var diagnosisNameParameter = diagnosisName != null ?
                new ObjectParameter("DiagnosisName", diagnosisName) :
                new ObjectParameter("DiagnosisName", typeof(string));
    
            var iCDCodeParameter = iCDCode != null ?
                new ObjectParameter("ICDCode", iCDCode) :
                new ObjectParameter("ICDCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ssp_ValidateAndUpdateDictation_Diagnosis", diagnosisIDParameter, diagnosisNameParameter, iCDCodeParameter);
        }
    
        public virtual int ssp_InsertProblem_Appointment(Nullable<int> patientID, Nullable<int> diagnosisID, Nullable<int> appointmentID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_InsertProblem_Appointment", patientIDParameter, diagnosisIDParameter, appointmentIDParameter);
        }
    
        public virtual ObjectResult<ssp_GetLabAddress_Result> ssp_GetLabAddress(Nullable<int> ordersegmentID, string labCodes)
        {
            var ordersegmentIDParameter = ordersegmentID.HasValue ?
                new ObjectParameter("OrdersegmentID", ordersegmentID) :
                new ObjectParameter("OrdersegmentID", typeof(int));
    
            var labCodesParameter = labCodes != null ?
                new ObjectParameter("LabCodes", labCodes) :
                new ObjectParameter("LabCodes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetLabAddress_Result>("ssp_GetLabAddress", ordersegmentIDParameter, labCodesParameter);
        }
    
        public virtual ObjectResult<ssp_ReportScanUpload_Result> ssp_ReportScanUpload(Nullable<int> patientID, Nullable<int> all, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var allParameter = all.HasValue ?
                new ObjectParameter("All", all) :
                new ObjectParameter("All", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_ReportScanUpload_Result>("ssp_ReportScanUpload", patientIDParameter, allParameter, fromDateParameter, endDateParameter);
        }
    
        public virtual int ssp_GetMarketSourceID(Nullable<int> prospectID, Nullable<int> tabID, ObjectParameter retunSrc)
        {
            var prospectIDParameter = prospectID.HasValue ?
                new ObjectParameter("ProspectID", prospectID) :
                new ObjectParameter("ProspectID", typeof(int));
    
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetMarketSourceID", prospectIDParameter, tabIDParameter, retunSrc);
        }
    
        public virtual int ssp_CRMMarketSourseInsert(Nullable<int> prospectID, string marketSources, Nullable<bool> updateFlag, Nullable<int> isProspect)
        {
            var prospectIDParameter = prospectID.HasValue ?
                new ObjectParameter("ProspectID", prospectID) :
                new ObjectParameter("ProspectID", typeof(int));
    
            var marketSourcesParameter = marketSources != null ?
                new ObjectParameter("marketSources", marketSources) :
                new ObjectParameter("marketSources", typeof(string));
    
            var updateFlagParameter = updateFlag.HasValue ?
                new ObjectParameter("UpdateFlag", updateFlag) :
                new ObjectParameter("UpdateFlag", typeof(bool));
    
            var isProspectParameter = isProspect.HasValue ?
                new ObjectParameter("IsProspect", isProspect) :
                new ObjectParameter("IsProspect", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_CRMMarketSourseInsert", prospectIDParameter, marketSourcesParameter, updateFlagParameter, isProspectParameter);
        }
    
        public virtual ObjectResult<ssp_GetAllProspect_Result> ssp_GetAllProspect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetAllProspect_Result>("ssp_GetAllProspect");
        }
    
        public virtual ObjectResult<ssp_XEROGetOrderItemsbyOrderID_Result> ssp_XEROGetOrderItemsbyOrderID(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XEROGetOrderItemsbyOrderID_Result>("ssp_XEROGetOrderItemsbyOrderID", orderIDParameter);
        }
    
        public virtual ObjectResult<ssp_XEROGetOrdersbyOrderID_Result> ssp_XEROGetOrdersbyOrderID(string orderIDs)
        {
            var orderIDsParameter = orderIDs != null ?
                new ObjectParameter("OrderIDs", orderIDs) :
                new ObjectParameter("OrderIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XEROGetOrdersbyOrderID_Result>("ssp_XEROGetOrdersbyOrderID", orderIDsParameter);
        }
    
        public virtual ObjectResult<ssp_XEROGetOrdersnotMatchQB_Result> ssp_XEROGetOrdersnotMatchQB(Nullable<int> updateFlag, Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var updateFlagParameter = updateFlag.HasValue ?
                new ObjectParameter("UpdateFlag", updateFlag) :
                new ObjectParameter("UpdateFlag", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XEROGetOrdersnotMatchQB_Result>("ssp_XEROGetOrdersnotMatchQB", updateFlagParameter, pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_XEROGetpatientsbyPatientID_Result> ssp_XEROGetpatientsbyPatientID(string patientIDs)
        {
            var patientIDsParameter = patientIDs != null ?
                new ObjectParameter("PatientIDs", patientIDs) :
                new ObjectParameter("PatientIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XEROGetpatientsbyPatientID_Result>("ssp_XEROGetpatientsbyPatientID", patientIDsParameter);
        }
    
        public virtual ObjectResult<ssp_XEROGetpatientsnotMatchQB_Result> ssp_XEROGetpatientsnotMatchQB(Nullable<int> updateFlag, Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var updateFlagParameter = updateFlag.HasValue ?
                new ObjectParameter("UpdateFlag", updateFlag) :
                new ObjectParameter("UpdateFlag", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XEROGetpatientsnotMatchQB_Result>("ssp_XEROGetpatientsnotMatchQB", updateFlagParameter, pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual int ssp_XEROInsertMatchRecords(Nullable<int> patientID, string qbId)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var qbIdParameter = qbId != null ?
                new ObjectParameter("QbId", qbId) :
                new ObjectParameter("QbId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_XEROInsertMatchRecords", patientIDParameter, qbIdParameter);
        }
    
        public virtual int ssp_XEROUpdateMatchRecords(Nullable<int> patientID, Nullable<int> updateFlag)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var updateFlagParameter = updateFlag.HasValue ?
                new ObjectParameter("UpdateFlag", updateFlag) :
                new ObjectParameter("UpdateFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_XEROUpdateMatchRecords", patientIDParameter, updateFlagParameter);
        }
    
        public virtual int ssp_CrmInterfaceMatchData(Nullable<int> prospectID, Nullable<int> chkEventTrue, Nullable<System.DateTime> eventDate, string eventName, Nullable<int> eventID, Nullable<int> chkMarketSource, string marketSourceName, Nullable<int> marketSourceID, string email, ObjectParameter outputParam)
        {
            var prospectIDParameter = prospectID.HasValue ?
                new ObjectParameter("ProspectID", prospectID) :
                new ObjectParameter("ProspectID", typeof(int));
    
            var chkEventTrueParameter = chkEventTrue.HasValue ?
                new ObjectParameter("ChkEventTrue", chkEventTrue) :
                new ObjectParameter("ChkEventTrue", typeof(int));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var chkMarketSourceParameter = chkMarketSource.HasValue ?
                new ObjectParameter("chkMarketSource", chkMarketSource) :
                new ObjectParameter("chkMarketSource", typeof(int));
    
            var marketSourceNameParameter = marketSourceName != null ?
                new ObjectParameter("MarketSourceName", marketSourceName) :
                new ObjectParameter("MarketSourceName", typeof(string));
    
            var marketSourceIDParameter = marketSourceID.HasValue ?
                new ObjectParameter("MarketSourceID", marketSourceID) :
                new ObjectParameter("MarketSourceID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_CrmInterfaceMatchData", prospectIDParameter, chkEventTrueParameter, eventDateParameter, eventNameParameter, eventIDParameter, chkMarketSourceParameter, marketSourceNameParameter, marketSourceIDParameter, emailParameter, outputParam);
        }
    
        public virtual int ssp_DeleteAll_Prospect(string prospectIds)
        {
            var prospectIdsParameter = prospectIds != null ?
                new ObjectParameter("ProspectIds", prospectIds) :
                new ObjectParameter("ProspectIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_DeleteAll_Prospect", prospectIdsParameter);
        }
    
        public virtual ObjectResult<ssp_Get_CRMPostSeminarAppointmentType_Result> ssp_Get_CRMPostSeminarAppointmentType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_Get_CRMPostSeminarAppointmentType_Result>("ssp_Get_CRMPostSeminarAppointmentType");
        }
    
        public virtual int ssp_InsertCRmContactDetails(Nullable<int> staffID, Nullable<int> followUpID, string messageBody, Nullable<int> patientID, Nullable<int> followupCategory, Nullable<int> aptID, Nullable<int> aptType, Nullable<int> cRM_InsertID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var followUpIDParameter = followUpID.HasValue ?
                new ObjectParameter("FollowUpID", followUpID) :
                new ObjectParameter("FollowUpID", typeof(int));
    
            var messageBodyParameter = messageBody != null ?
                new ObjectParameter("MessageBody", messageBody) :
                new ObjectParameter("MessageBody", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var followupCategoryParameter = followupCategory.HasValue ?
                new ObjectParameter("FollowupCategory", followupCategory) :
                new ObjectParameter("FollowupCategory", typeof(int));
    
            var aptIDParameter = aptID.HasValue ?
                new ObjectParameter("AptID", aptID) :
                new ObjectParameter("AptID", typeof(int));
    
            var aptTypeParameter = aptType.HasValue ?
                new ObjectParameter("AptType", aptType) :
                new ObjectParameter("AptType", typeof(int));
    
            var cRM_InsertIDParameter = cRM_InsertID.HasValue ?
                new ObjectParameter("CRM_InsertID", cRM_InsertID) :
                new ObjectParameter("CRM_InsertID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_InsertCRmContactDetails", staffIDParameter, followUpIDParameter, messageBodyParameter, patientIDParameter, followupCategoryParameter, aptIDParameter, aptTypeParameter, cRM_InsertIDParameter);
        }
    
        public virtual ObjectResult<ssp_GetCrm_Campaign_Result> ssp_GetCrm_Campaign()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetCrm_Campaign_Result>("ssp_GetCrm_Campaign");
        }
    
        public virtual ObjectResult<ssp_GetRenewalPackages_Result> ssp_GetRenewalPackages(Nullable<int> renewalID)
        {
            var renewalIDParameter = renewalID.HasValue ?
                new ObjectParameter("RenewalID", renewalID) :
                new ObjectParameter("RenewalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetRenewalPackages_Result>("ssp_GetRenewalPackages", renewalIDParameter);
        }
    
        public virtual int ssp_InsertPatientRenewalPackages(Nullable<int> patientID, Nullable<int> renewalID, Nullable<bool> insertFlag)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var renewalIDParameter = renewalID.HasValue ?
                new ObjectParameter("RenewalID", renewalID) :
                new ObjectParameter("RenewalID", typeof(int));
    
            var insertFlagParameter = insertFlag.HasValue ?
                new ObjectParameter("InsertFlag", insertFlag) :
                new ObjectParameter("InsertFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_InsertPatientRenewalPackages", patientIDParameter, renewalIDParameter, insertFlagParameter);
        }
    
        public virtual ObjectResult<ssp_GetPatientDetailById_Result> ssp_GetPatientDetailById(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetPatientDetailById_Result>("ssp_GetPatientDetailById", patientIdParameter);
        }
    
        public virtual int ssp_insertPatientSurveyQuestionsAnswer(string fieldName, string answer, Nullable<int> patientID, Nullable<System.DateTime> createdDate, string entryId, Nullable<int> apptID)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var entryIdParameter = entryId != null ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(string));
    
            var apptIDParameter = apptID.HasValue ?
                new ObjectParameter("ApptID", apptID) :
                new ObjectParameter("ApptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_insertPatientSurveyQuestionsAnswer", fieldNameParameter, answerParameter, patientIDParameter, createdDateParameter, entryIdParameter, apptIDParameter);
        }
    
        public virtual int Ssp_UndoPatientMerge(Nullable<int> mergedPatinetID)
        {
            var mergedPatinetIDParameter = mergedPatinetID.HasValue ?
                new ObjectParameter("MergedPatinetID", mergedPatinetID) :
                new ObjectParameter("MergedPatinetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ssp_UndoPatientMerge", mergedPatinetIDParameter);
        }
    
        public virtual ObjectResult<ssp_GetListMergedPatients_Result> ssp_GetListMergedPatients(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder, Nullable<int> isSearch, string searchColumn, string searchText)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var isSearchParameter = isSearch.HasValue ?
                new ObjectParameter("IsSearch", isSearch) :
                new ObjectParameter("IsSearch", typeof(int));
    
            var searchColumnParameter = searchColumn != null ?
                new ObjectParameter("SearchColumn", searchColumn) :
                new ObjectParameter("SearchColumn", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetListMergedPatients_Result>("ssp_GetListMergedPatients", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter, isSearchParameter, searchColumnParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<ssp_GetListofPatientsToMerge_Result> ssp_GetListofPatientsToMerge(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder, Nullable<int> isSearch, string searchColumn, string searchText)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var isSearchParameter = isSearch.HasValue ?
                new ObjectParameter("IsSearch", isSearch) :
                new ObjectParameter("IsSearch", typeof(int));
    
            var searchColumnParameter = searchColumn != null ?
                new ObjectParameter("SearchColumn", searchColumn) :
                new ObjectParameter("SearchColumn", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetListofPatientsToMerge_Result>("ssp_GetListofPatientsToMerge", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter, isSearchParameter, searchColumnParameter, searchTextParameter);
        }
    
        public virtual int Ssp_UpdatePatientListMerge(Nullable<int> existingPatinetID, Nullable<int> newAssignPatientID, Nullable<int> createdBy)
        {
            var existingPatinetIDParameter = existingPatinetID.HasValue ?
                new ObjectParameter("ExistingPatinetID", existingPatinetID) :
                new ObjectParameter("ExistingPatinetID", typeof(int));
    
            var newAssignPatientIDParameter = newAssignPatientID.HasValue ?
                new ObjectParameter("NewAssignPatientID", newAssignPatientID) :
                new ObjectParameter("NewAssignPatientID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ssp_UpdatePatientListMerge", existingPatinetIDParameter, newAssignPatientIDParameter, createdByParameter);
        }
    
        public virtual int ssp_UpdatePatientSurveyQuestions(string questionIds)
        {
            var questionIdsParameter = questionIds != null ?
                new ObjectParameter("QuestionIds", questionIds) :
                new ObjectParameter("QuestionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_UpdatePatientSurveyQuestions", questionIdsParameter);
        }
    
        public virtual int ssp_insertPatientSurveyQuestions(string question, string type, string fieldID, ObjectParameter questionIDOUT)
        {
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fieldIDParameter = fieldID != null ?
                new ObjectParameter("FieldID", fieldID) :
                new ObjectParameter("FieldID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_insertPatientSurveyQuestions", questionParameter, typeParameter, fieldIDParameter, questionIDOUT);
        }
    
        public virtual ObjectResult<ssp_Get_Attendent_Result> ssp_Get_Attendent(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_Get_Attendent_Result>("ssp_Get_Attendent", eventIdParameter);
        }
    
        public virtual ObjectResult<ssp_ReportGraphCRmProspect_Result> ssp_ReportGraphCRmProspect(Nullable<int> campaign)
        {
            var campaignParameter = campaign.HasValue ?
                new ObjectParameter("Campaign", campaign) :
                new ObjectParameter("Campaign", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_ReportGraphCRmProspect_Result>("ssp_ReportGraphCRmProspect", campaignParameter);
        }
    
        public virtual ObjectResult<ssp_CRMDashBoardStatistic_Result> ssp_CRMDashBoardStatistic()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_CRMDashBoardStatistic_Result>("ssp_CRMDashBoardStatistic");
        }
    
        public virtual ObjectResult<ssp_CRMDashBoardEventGraph_Result> ssp_CRMDashBoardEventGraph(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_CRMDashBoardEventGraph_Result>("ssp_CRMDashBoardEventGraph", eventIDParameter);
        }
    
        public virtual ObjectResult<ssp_ReportGraphCRmEventProspect_Result> ssp_ReportGraphCRmEventProspect(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_ReportGraphCRmEventProspect_Result>("ssp_ReportGraphCRmEventProspect", eventIDParameter);
        }
    
        public virtual ObjectResult<ssp_GetEmployeebyDepartmentID_Result> ssp_GetEmployeebyDepartmentID(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder, Nullable<int> isSearch, string searchColumn, string searchText, Nullable<int> departmentID)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var isSearchParameter = isSearch.HasValue ?
                new ObjectParameter("IsSearch", isSearch) :
                new ObjectParameter("IsSearch", typeof(int));
    
            var searchColumnParameter = searchColumn != null ?
                new ObjectParameter("SearchColumn", searchColumn) :
                new ObjectParameter("SearchColumn", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetEmployeebyDepartmentID_Result>("ssp_GetEmployeebyDepartmentID", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter, isSearchParameter, searchColumnParameter, searchTextParameter, departmentIDParameter);
        }
    
        public virtual int ssp_InsertUpdateSharePointPrescriptionDetail(Nullable<int> presciptionId, string patientName, string clinic, string vials, Nullable<System.DateTime> lastRefill, Nullable<System.DateTime> medStartDate, string physician, string comments, string diet, string medical)
        {
            var presciptionIdParameter = presciptionId.HasValue ?
                new ObjectParameter("PresciptionId", presciptionId) :
                new ObjectParameter("PresciptionId", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var clinicParameter = clinic != null ?
                new ObjectParameter("Clinic", clinic) :
                new ObjectParameter("Clinic", typeof(string));
    
            var vialsParameter = vials != null ?
                new ObjectParameter("Vials", vials) :
                new ObjectParameter("Vials", typeof(string));
    
            var lastRefillParameter = lastRefill.HasValue ?
                new ObjectParameter("LastRefill", lastRefill) :
                new ObjectParameter("LastRefill", typeof(System.DateTime));
    
            var medStartDateParameter = medStartDate.HasValue ?
                new ObjectParameter("MedStartDate", medStartDate) :
                new ObjectParameter("MedStartDate", typeof(System.DateTime));
    
            var physicianParameter = physician != null ?
                new ObjectParameter("Physician", physician) :
                new ObjectParameter("Physician", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var dietParameter = diet != null ?
                new ObjectParameter("Diet", diet) :
                new ObjectParameter("Diet", typeof(string));
    
            var medicalParameter = medical != null ?
                new ObjectParameter("Medical", medical) :
                new ObjectParameter("Medical", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_InsertUpdateSharePointPrescriptionDetail", presciptionIdParameter, patientNameParameter, clinicParameter, vialsParameter, lastRefillParameter, medStartDateParameter, physicianParameter, commentsParameter, dietParameter, medicalParameter);
        }
    
        public virtual ObjectResult<ssp_GetAllSharepointPrescriptionDetailList_Result> ssp_GetAllSharepointPrescriptionDetailList(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetAllSharepointPrescriptionDetailList_Result>("ssp_GetAllSharepointPrescriptionDetailList", iDParameter);
        }
    
        public virtual ObjectResult<ssp_GetAllSharepointPrescriptionDetailReport_Result> ssp_GetAllSharepointPrescriptionDetailReport(string patientName, string clinic, string physician, Nullable<System.DateTime> lastRefill, Nullable<System.DateTime> medStartDate, Nullable<bool> isDiet, Nullable<bool> isMedical)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var clinicParameter = clinic != null ?
                new ObjectParameter("Clinic", clinic) :
                new ObjectParameter("Clinic", typeof(string));
    
            var physicianParameter = physician != null ?
                new ObjectParameter("Physician", physician) :
                new ObjectParameter("Physician", typeof(string));
    
            var lastRefillParameter = lastRefill.HasValue ?
                new ObjectParameter("LastRefill", lastRefill) :
                new ObjectParameter("LastRefill", typeof(System.DateTime));
    
            var medStartDateParameter = medStartDate.HasValue ?
                new ObjectParameter("MedStartDate", medStartDate) :
                new ObjectParameter("MedStartDate", typeof(System.DateTime));
    
            var isDietParameter = isDiet.HasValue ?
                new ObjectParameter("IsDiet", isDiet) :
                new ObjectParameter("IsDiet", typeof(bool));
    
            var isMedicalParameter = isMedical.HasValue ?
                new ObjectParameter("IsMedical", isMedical) :
                new ObjectParameter("IsMedical", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetAllSharepointPrescriptionDetailReport_Result>("ssp_GetAllSharepointPrescriptionDetailReport", patientNameParameter, clinicParameter, physicianParameter, lastRefillParameter, medStartDateParameter, isDietParameter, isMedicalParameter);
        }
    
        public virtual ObjectResult<ssp_grdMyTicketsDataCal_Result> ssp_grdMyTicketsDataCal(Nullable<int> staffID, Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_grdMyTicketsDataCal_Result>("ssp_grdMyTicketsDataCal", staffIDParameter, pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_GetCreatedClosedCal_Result> ssp_GetCreatedClosedCal(Nullable<int> staffID, Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetCreatedClosedCal_Result>("ssp_GetCreatedClosedCal", staffIDParameter, pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_GetMyActiveCalendar_Result> ssp_GetMyActiveCalendar(Nullable<int> staffID, Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetMyActiveCalendar_Result>("ssp_GetMyActiveCalendar", staffIDParameter, pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_GetPatientDetails_Result> ssp_GetPatientDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetPatientDetails_Result>("ssp_GetPatientDetails");
        }
    
        public virtual int ssp_DeleteException()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_DeleteException");
        }
    
        public virtual int ssp_DeleteExceptionsByOrderID(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_DeleteExceptionsByOrderID", orderIdParameter);
        }
    
        public virtual ObjectResult<ssp_SearchPatients_By_text_Result> ssp_SearchPatients_By_text(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_SearchPatients_By_text_Result>("ssp_SearchPatients_By_text", searchTextParameter);
        }
    
        public virtual ObjectResult<ssp_Getmatchedpatientwithprospect_Result> ssp_Getmatchedpatientwithprospect(Nullable<int> prospectID)
        {
            var prospectIDParameter = prospectID.HasValue ?
                new ObjectParameter("ProspectID", prospectID) :
                new ObjectParameter("ProspectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_Getmatchedpatientwithprospect_Result>("ssp_Getmatchedpatientwithprospect", prospectIDParameter);
        }
    
        public virtual ObjectResult<ssp_XERO_MatchedPatients_Result> ssp_XERO_MatchedPatients(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XERO_MatchedPatients_Result>("ssp_XERO_MatchedPatients", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_XERO_MatchedPatientsWithXeroPatients_Result> ssp_XERO_MatchedPatientsWithXeroPatients(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder, Nullable<int> patientID)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XERO_MatchedPatientsWithXeroPatients_Result>("ssp_XERO_MatchedPatientsWithXeroPatients", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<ssp_XEROpatientsMatchedSearch_Result> ssp_XEROpatientsMatchedSearch(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder, string firstName, string lastName, string email)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XEROpatientsMatchedSearch_Result>("ssp_XEROpatientsMatchedSearch", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter, firstNameParameter, lastNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<ssp_XEROpatientsnotMatch_Result> ssp_XEROpatientsnotMatch(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XEROpatientsnotMatch_Result>("ssp_XEROpatientsnotMatch", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_XEROpatientsSearchToMatch_Result> ssp_XEROpatientsSearchToMatch(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder, string firstName, string lastName, string email)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_XEROpatientsSearchToMatch_Result>("ssp_XEROpatientsSearchToMatch", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter, firstNameParameter, lastNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<ssp_GetLabReviewApt_Result> ssp_GetLabReviewApt(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetLabReviewApt_Result>("ssp_GetLabReviewApt", patientIDParameter);
        }
    
        public virtual ObjectResult<ssp_FreshBook_MatchedPatients_Result> ssp_FreshBook_MatchedPatients(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_FreshBook_MatchedPatients_Result>("ssp_FreshBook_MatchedPatients", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_FreshBookGetOrdersnotMatchFB_Result> ssp_FreshBookGetOrdersnotMatchFB(Nullable<int> updateFlag, Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var updateFlagParameter = updateFlag.HasValue ?
                new ObjectParameter("UpdateFlag", updateFlag) :
                new ObjectParameter("UpdateFlag", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_FreshBookGetOrdersnotMatchFB_Result>("ssp_FreshBookGetOrdersnotMatchFB", updateFlagParameter, pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_FBGetOrdersbyOrderID_Result> ssp_FBGetOrdersbyOrderID(string orderIDs)
        {
            var orderIDsParameter = orderIDs != null ?
                new ObjectParameter("OrderIDs", orderIDs) :
                new ObjectParameter("OrderIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_FBGetOrdersbyOrderID_Result>("ssp_FBGetOrdersbyOrderID", orderIDsParameter);
        }
    
        public virtual ObjectResult<ssp_FreshBookGetpatientsbyPatientID_Result> ssp_FreshBookGetpatientsbyPatientID(string patientIDs)
        {
            var patientIDsParameter = patientIDs != null ?
                new ObjectParameter("PatientIDs", patientIDs) :
                new ObjectParameter("PatientIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_FreshBookGetpatientsbyPatientID_Result>("ssp_FreshBookGetpatientsbyPatientID", patientIDsParameter);
        }
    
        public virtual ObjectResult<ssp_FreshBook_MatchedPatientsWithFreshbookClientByPatientId_Result> ssp_FreshBook_MatchedPatientsWithFreshbookClientByPatientId(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder, Nullable<int> patientID)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_FreshBook_MatchedPatientsWithFreshbookClientByPatientId_Result>("ssp_FreshBook_MatchedPatientsWithFreshbookClientByPatientId", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<ssp_FreshBook_NotMatchedPatients_Result> ssp_FreshBook_NotMatchedPatients(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_FreshBook_NotMatchedPatients_Result>("ssp_FreshBook_NotMatchedPatients", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_Freshbook_SearchPatientToMatchFreshbookClient_Result> ssp_Freshbook_SearchPatientToMatchFreshbookClient(Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder, string firstName, string lastName, string email)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_Freshbook_SearchPatientToMatchFreshbookClient_Result>("ssp_Freshbook_SearchPatientToMatchFreshbookClient", pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter, firstNameParameter, lastNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<ssp_FreshBookGetpatientsnotMatchFB_Result> ssp_FreshBookGetpatientsnotMatchFB(Nullable<int> updateFlag, Nullable<int> pageIndex, Nullable<int> pageSize, string sort, string sortOrder)
        {
            var updateFlagParameter = updateFlag.HasValue ?
                new ObjectParameter("UpdateFlag", updateFlag) :
                new ObjectParameter("UpdateFlag", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_FreshBookGetpatientsnotMatchFB_Result>("ssp_FreshBookGetpatientsnotMatchFB", updateFlagParameter, pageIndexParameter, pageSizeParameter, sortParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<ssp_FreshBookGetOrderItemsbyOrderID_Result> ssp_FreshBookGetOrderItemsbyOrderID(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_FreshBookGetOrderItemsbyOrderID_Result>("ssp_FreshBookGetOrderItemsbyOrderID", orderIDParameter);
        }
    
        public virtual ObjectResult<ssp_FBGetExistInvoiceOrdersbyOrderID_Result> ssp_FBGetExistInvoiceOrdersbyOrderID(string orderIDs)
        {
            var orderIDsParameter = orderIDs != null ?
                new ObjectParameter("OrderIDs", orderIDs) :
                new ObjectParameter("OrderIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_FBGetExistInvoiceOrdersbyOrderID_Result>("ssp_FBGetExistInvoiceOrdersbyOrderID", orderIDsParameter);
        }
    
        public virtual ObjectResult<GetAllCreatedInvoice_Result> GetAllCreatedInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCreatedInvoice_Result>("GetAllCreatedInvoice");
        }
    
        public virtual int ssp_FBCreatedInvoice(Nullable<float> productId, Nullable<float> invoiceId, Nullable<bool> isCreated)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(float));
    
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(float));
    
            var isCreatedParameter = isCreated.HasValue ?
                new ObjectParameter("IsCreated", isCreated) :
                new ObjectParameter("IsCreated", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_FBCreatedInvoice", productIdParameter, invoiceIdParameter, isCreatedParameter);
        }
    
        public virtual ObjectResult<ssp_GetFBCreatedInvoice_Result> ssp_GetFBCreatedInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetFBCreatedInvoice_Result>("ssp_GetFBCreatedInvoice");
        }
    
        public virtual int ssp_DeleteExceptionsByProfileItemID(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_DeleteExceptionsByProfileItemID", orderIdParameter);
        }
    
        public virtual int ssp_DeleteRecordAttendee(Nullable<int> eventId, Nullable<int> prospectId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var prospectIdParameter = prospectId.HasValue ?
                new ObjectParameter("ProspectId", prospectId) :
                new ObjectParameter("ProspectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_DeleteRecordAttendee", eventIdParameter, prospectIdParameter);
        }
    }
}
